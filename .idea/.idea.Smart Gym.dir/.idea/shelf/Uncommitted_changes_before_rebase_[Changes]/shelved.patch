Index: SmartGym/Services/ClassService/ClassService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing AutoMapper;\nusing Microsoft.AspNetCore.Http.HttpResults;\nusing Microsoft.EntityFrameworkCore;\nusing SmartGym.Data;\nusing SmartGym.Models;\n\nnamespace SmartGym.Services;\n\npublic class ClassService : IClassService\n{\n\n\tprivate readonly IUnitOfWork _unitOfWork;\n\tprivate readonly IMapper _mapper;\n\tpublic ClassService(IUnitOfWork unitOfWork, IMapper mapper)\n\t{\n\t\t_unitOfWork = unitOfWork;\n\t\t_mapper = mapper;\n\t}\n\n\t//given a partial Class object (post DTO) received from body, create a class\n\t//class creation requires a trainer to be assigned\n\t//data from body will be mapped to a new Class entity before being stored in the database\n\tpublic async Task<ClassDTO> CreateClass(ClassPostDTO newClassData)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar trainer = await _unitOfWork.UserRepository.GetAsync(newClassData.TrainerId);\n\t\t\tif (trainer == null)\n\t\t\t\tthrow new Exception(\"Trainer not found\");\n\t\t\tClass newClass = _mapper.Map<Class>(newClassData);\n\n\t\t\tawait _unitOfWork.ClassRepository.AddAsync(newClass);\n\t\t\tawait _unitOfWork.SaveAsync();\n\t\t\treturn _mapper.Map<ClassDTO>(newClass);\n\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine($\"Error in CreateClass: {ex.Message}\");\n\t\t\tthrow;\n\t\t}\n\t}\n\t//given an specific id (from url), and request body (patch dto), a class can be partially updated (patch, not put) \n\t//new class data is mapped to the existing class entity before db storage\n\tpublic async Task<ClassDTO?> UpdateClassById(int id, ClassPatchDTO newClassData)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar classEntity = await _unitOfWork.ClassRepository.GetAsync(id);\n\t\t\tif (classEntity == null)\n\t\t\t\treturn null;\n\n\t\t\t_mapper.Map(newClassData, classEntity);\n\n\t\t\t_unitOfWork.ClassRepository.Update(classEntity);\n\t\t\tawait _unitOfWork.SaveAsync();\n\t\t\treturn _mapper.Map<ClassDTO>(classEntity);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine($\"Error while updating class: {ex.Message}\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t//given the ID from the url, the method finds the class entity and deletes it\n\tpublic async Task<bool> DeleteClass(int id)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar classEntity = await _unitOfWork.ClassRepository.GetAsync(id);\n\t\t\tif (classEntity == null)\n\t\t\t\treturn false;\n\n\t\t\t_unitOfWork.ClassRepository.Delete(classEntity);\n\t\t\tawait _unitOfWork.SaveAsync();\n\t\t\treturn true;\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine($\"Error while deleting class: {ex.Message}\");\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t//gets a list of all of the created classes\n\tpublic async Task<List<ClassDTO>> GetAllClasses()\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar classes = await _unitOfWork.ClassRepository.GetAsync();\n\t\t\tvar classList = _mapper.Map<List<ClassDTO>>(classes);\n\t\t\treturn classList.ToList();\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine($\"Error in GetAllClasses: {ex.Message}\");\n\t\t\treturn new List<ClassDTO>();\n\t\t}\n\t}\n\n\t//given and ID from the URL, the method returns a specific Class; before displaying to the user, the entity is mapped to a DTO to be displayed to the user, protecting db layer (see comments below)\n\tpublic async Task<ClassDTO> GetClassById(int id)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar classEntity = await _unitOfWork.ClassRepository.GetAsync(id);\n\t\t\treturn _mapper.Map<ClassDTO>(classEntity);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine($\"Error in GetClassById: {ex.Message}\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t// NOTE: This method returns a DTO intended for read/display purposes only.\n\t// Do NOT use this to retrieve entities for update, patch, or delete operations.\n\t// For internal logic, use _unitOfWork.ClassRepository.GetAsync(id) to get the actual tracked entity.\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SmartGym/Services/ClassService/ClassService.cs b/SmartGym/Services/ClassService/ClassService.cs
--- a/SmartGym/Services/ClassService/ClassService.cs	(revision 2d9736b8e1aa09cd4facd2b110b412be48e86d06)
+++ b/SmartGym/Services/ClassService/ClassService.cs	(date 1753921756787)
@@ -98,7 +98,6 @@
 			return new List<ClassDTO>();
 		}
 	}
-
 	//given and ID from the URL, the method returns a specific Class; before displaying to the user, the entity is mapped to a DTO to be displayed to the user, protecting db layer (see comments below)
 	public async Task<ClassDTO> GetClassById(int id)
 	{
