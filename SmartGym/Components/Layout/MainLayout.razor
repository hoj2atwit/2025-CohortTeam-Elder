@inherits LayoutComponentBase

<CascadingValue Value="this">
    <div class="page">
        <CascadingAuthenticationState>
            <AuthorizeView>
                <div class="sidebar border-black-500 border-r-2 bg-[#1b283a]">
                    <NavMenu />
                </div>
                <div class="filler" style="width:16rem; top:0; bottom:0; left:0;" />
            </AuthorizeView>
        </CascadingAuthenticationState>
    
            <main>
                <article class="content bg-[#f3f4f6] px-4">
                    <CascadingAuthenticationState>
                        <AuthorizeView>
                            <div class="sticky top-0 z-10 bg-[#f3f4f6]">
                                <SearchNavBar @ref=searchNav title=@searchNavTitle OnChangeEventCallBack=searchBarOnChange isSearchable=@isSearchable />
                            </div>
                        </AuthorizeView>
                </CascadingAuthenticationState>
                    @Body
                </article>
            </main>
    </div>

    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">🗙</span>
    </div>
</CascadingValue>

@code
{
    private string searchNavTitle { get; set; } = "Smart Gym";
    private EventCallback<string> searchBarOnChange { get; set; }
    private SearchNavBar? searchNav { get; set; }
    private bool isSearchable { get; set; } = false;

    protected override Task OnParametersSetAsync()
    {
        searchSetupDefault();
        return base.OnParametersSetAsync();
    }

    public async Task setupSearch(string title, EventCallback<string> bodySearchMethod)
    {
        searchNavTitle = title;
        searchBarOnChange = bodySearchMethod;
        isSearchable = true;
        StateHasChanged();
    }

    private Task searchSetupDefault()
    {
        searchNavTitle = "SmartGym";
        searchBarOnChange = new EventCallback<string>();
        isSearchable = false;
        StateHasChanged();

        return Task.CompletedTask;
    }

    public Task setupNavTitleNoSearch(string s)
    {
        searchNavTitle = s;
        searchBarOnChange = new EventCallback<string>();
        isSearchable = false;
        StateHasChanged();

        return Task.CompletedTask;
    }
}
