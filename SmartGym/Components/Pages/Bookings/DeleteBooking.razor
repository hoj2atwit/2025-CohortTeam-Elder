@page "/deletebooking/{uId:int}-{cId:int}-{bId:int}"
@using SmartGym.Models
@using SmartGym.Constants.Enums
@using SmartGym.Services
@using Microsoft.AspNetCore.Identity
@inject SmartGym.Services.IBookingService service
@inject NavigationManager navManager
@inject UserManager<AppUser> UserManager

<PageTitle>Delete Booking</PageTitle>


  @if (booking == null)
  {
      <LoadingLayout/>
  }
  else
  {
      <h1 class="mb-4" id="title">Delete Booking</h1>
      <section class="contained text-xl bg-text" aria-labelledby="title">
		<p><strong>User ID: </strong>@booking.UserId</p>
		<p><strong>Class ID: </strong>@booking.ClassSessionId</p>
		<p><strong>Status: </strong>@booking.Status</p>
		<p><strong>Created at: </strong>@booking.CreatedAt.ToString("MM/dd/yyyy hh:mm tt")</p>
		<p><strong>Confirmed at: </strong>@booking.ConfirmedAt.ToString("MM/dd/yyyy hh:mm tt")</p>
		<p><strong>Updated at: </strong>@booking.UpdatedAt.ToString("MM/dd/yyyy hh:mm tt")</p>
        <hr />
      <div>
          <p>Are you sure you want to delete this booking?<br/><br/>
        <button @onclick=DelBooking type="submit" class="inline-block bg-red-500 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded shadow transition duration-150 hover:cursor-pointer">
            <i class="fa-solid fa-trash mr-4"></i>Delete Booking
            </button>
                <a href="/viewbookings" class="text-secondary">Cancel</a>
            </p>
      </div>
    </section>
  }

@code {
    [Parameter]
    public int uId { get; set; }
    [Parameter]
    public int cId { get; set; }
    [Parameter]
    public int bId { get; set; }
    private BookingDTO booking { get; set; }


    protected override async Task OnInitializedAsync()
    {
        booking = await FindBooking();
        StateHasChanged();
    }

    private async Task<BookingDTO> FindBooking()
    {
        List<BookingDTO> bookingList;
        bookingList = await service.GetBookingByUserId(uId);

        foreach(BookingDTO bookingDTO in bookingList)
        {
            if (bookingDTO.Id == bId)
            {
                return bookingDTO;
            }
        }

        return null;
    }

    /// <summary>
    /// Deletes a booking
    /// </summary>
    /// <returns></returns>
    private async Task DelBooking()
    {
        await service.DeleteBooking(bId);
        navManager.NavigateTo("/viewbookings");
    }

    // private async Task DelBookingByUserId()
    // {
    //     await service.DeleteBooking(id);
    // }

    // private async Task DelBookingByClassId()
    // {
    //     await service.DeleteBooking(id);
    // }
}
