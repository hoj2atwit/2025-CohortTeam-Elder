@page "/addnewbooking"
@using SmartGym.Constants.Enums
@using SmartGym.Helpers
@using SmartGym.Models
@using SmartGym.Services
@inject SmartGym.Services.IBookingService bookingService
@inject SmartGym.Services.IUserService userService
@inject NavigationManager navManager
@inject IJSRuntime JS


<PageTitle>Add New Booking</PageTitle>


<h1 class="mb-4" id="title">Add New Booking</h1>
<section class="contained text-xl bg-text" style="padding-top:40px;" aria-labelledby="title">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <p>
		<label for="userid">Name: </label>
		<select @bind=UserId name="userid" id="userid">
			<option value="" disabled>Select a member</option>
			@foreach (UserDto userDto in userList)
			{
				<option value="@userDto.Id">@userDto.Name</option>
			}
		</select>
        </p>
        <p>
		  <label for="session">Class Session: </label>
		  <select @bind=ClassId name="session" id="session">
			  <option value="" disabled>Select a class session</option>
			  @foreach (BookingDTO bookingDTO in bookingList)
			  {
				  <option value="@bookingDTO.ClassSessionId">@bookingDTO.ClassSessionId</option>
			  }
		  </select>
        </p>
        <p>
		  <label for="status">Status: </label>
		  <select @bind=Status name="status" id="status">
			  <option value="" disabled>Select a status</option>
			  @foreach (BookingStatus status in Enum.GetValues(typeof(BookingStatus)))
			  {
				  <option value="@status">@EnumHelper.GetDisplayName(status)</option>
			  }
		  </select>
        </p>
	<p>
		<button @onclick=AddBooking class="inline-block bg-primary hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded shadow transition duration-150">
			<i class="fa-solid fa-plus mr-4"></i>Add Booking
		</button>
		<a href="/viewbookings" class="text-secondary">Cancel</a>
	</p>
    
  </section>
            


@code {
    public int UserId { get; set; }
    public int ClassId { get; set; }
    public BookingStatus Status { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime ConfirmedAt { get; set; }
    public DateTime UpdatedAt { get; set; }
    private UserDto user { get; set; }
    private List<UserDto> userList = new();
    private List<BookingDTO> bookingList = new();
    private List<BookingPostDTO> bookingPostList = new();

    protected override async Task OnInitializedAsync()
    {
        userList = await userService.GetAllUsers();
        bookingList = await bookingService.GetAllBookings();
    }

    /// <summary>
    /// Adds a booking to the table
    /// </summary>
    /// <returns></returns>
    private async Task AddBooking()
    {
        BookingPostDTO tempBooking = new BookingPostDTO();
        tempBooking.UserId = UserId;
        tempBooking.ClassSessionId = ClassId;
        tempBooking.CreatedAt = DateTime.Now;

		try
		{
			var bookingResult = await bookingService.CreateBooking(tempBooking);
			if (bookingResult.Waitlisted)
			{
				await JS.InvokeVoidAsync("alert", "Full Class, User Waitlisted");
				navManager.NavigateTo("/viewbookings", true);
				return;
			}
			await JS.InvokeVoidAsync("showBookingSuccessAndRedirect");
		}
		catch (Exception ex)
		{
			if (ex.Message.ToLower().Contains("double"))
			{
				await JS.InvokeVoidAsync("alert", "This user is already booked for this session.");
			}
			else if (ex.Message.ToLower().Contains("waitlist"))
			{
				await JS.InvokeVoidAsync("alert", "This user is already on the waitlist.");
			}
			else
			{
				await JS.InvokeVoidAsync("alert", "Could not book this class, please see a Manager or Admin");
			}
		}
    }
    
    private async Task GetUsers()
    {
        userList = await userService.GetAllUsers();
    }

    private async Task GetClassSessions()
    {
        bookingList = await bookingService.GetAllBookings();
    }
}

<script>
	function showBookingSuccessAndRedirect() {
		alert("Booking successful!");
		window.location.href = "/viewbookings";
	}
</script>
