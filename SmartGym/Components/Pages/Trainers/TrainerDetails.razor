@page "/dashboard/trainers/{TrainerId:int}"
@using SmartGym.Models
@using SmartGym.Services
@inject NavigationManager Navigation
@inject IUserService UserService

<PageTitle>@(trainer != null ? trainer.Name : "Trainer Details") - Admin Portal</PageTitle>

<!-- Main trainer details content -->
<div class="flex-1 overflow-y-auto p-4 lg:p-6 bg-[#f3f4f6]">
    @if (isLoading)
    {
        <div class="flex items-center justify-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (trainer == null)
    {
        <div class="text-center py-12">
            <h3 class="text-lg font-medium text-gray-900">Trainer not found</h3>
            <p class="mt-1 text-sm text-gray-500">The trainer you're looking for doesn't exist.</p>
            <button @onclick="GoBack" class="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
                Go Back
            </button>
        </div>
    }
    else
    {
        <div class="max-w-6xl mx-auto">
            <!-- Back Button -->
            <button @onclick="GoBack" class="flex items-center text-gray-600 hover:text-gray-900 mb-6 group">
                <svg class="w-5 h-5 mr-2 group-hover:-translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Back to Trainers
            </button>

            <!-- Trainer Header -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 lg:p-8 mb-6">
                <div class="flex flex-col lg:flex-row items-start lg:items-center gap-6">
                    <!-- Profile Image -->
                    <div class="relative">
                        <div class="w-24 h-24 lg:w-32 lg:h-32 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center border-4 border-gray-100">
                            <span class="text-white text-2xl lg:text-3xl font-bold">
                                @GetInitials()
                            </span>
                        </div>
                        <div class="absolute bottom-2 right-2 w-6 h-6 bg-green-400 rounded-full border-3 border-white"></div>
                    </div>
                    
                    <!-- Trainer Info -->
                    <div class="flex-1">
                        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                            <div>
                                <h1 class="text-2xl lg:text-3xl font-bold text-gray-900">@trainer.Name</h1>
                                <p class="text-lg text-gray-600 mt-1">Personal Trainer</p>
                                <div class="flex items-center mt-2 gap-4">
                                    <div class="flex items-center">
                                        <svg class="w-5 h-5 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                        </svg>
                                        <span class="text-sm font-medium text-gray-900">@GetRandomRating()</span>
                                        <span class="text-sm text-gray-500 ml-1">(@GetRandomValue(10, 50) reviews)</span>
                                    </div>
                                    <span class="text-sm text-gray-500">@GetRandomValue(2, 8) years experience</span>
                                </div>
                            </div>
                            
                            <!-- Action Buttons -->
                            <div class="flex flex-col sm:flex-row gap-3">
                                <button class="bg-[#f34f5d] hover:bg-[#f34f5d-600] text-white px-6 py-3 rounded-lg transition-colors font-medium">
                                    Set Schedule
                                </button>
                                <button class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg transition-colors font-medium">
                                    Assign Clients
                                </button>
                                <button class="border border-gray-300 hover:bg-gray-50 text-gray-700 px-6 py-3 rounded-lg transition-colors font-medium">
                                    Send Message
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6">
                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 515.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Active Clients</p>
                            <p class="text-2xl font-bold text-gray-900">@GetRandomValue(15, 50)</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Sessions This Month</p>
                            <p class="text-2xl font-bold text-gray-900">@GetRandomValue(20, 80)</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-yellow-500 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Average Rating</p>
                            <p class="text-2xl font-bold text-gray-900">@GetRandomRating()</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-purple-500 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Revenue This Month</p>
                           <p class="text-2xl font-bold text-gray-900">$@GetRandomValue(2000, 8000).ToString("N0")</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Content Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- About & Contact Info -->
                <div class="lg:col-span-2 space-y-6">
                    <!-- About -->
                    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">About</h3>
                        <p class="text-gray-600 leading-relaxed">
                            Professional fitness trainer dedicated to helping clients achieve their health and wellness goals through personalized training programs.
                        </p>
                        
                        <div class="mt-4">
                            <h4 class="text-sm font-medium text-gray-900 mb-2">Certifications</h4>
                            <div class="flex flex-wrap gap-2">
                                @foreach (var cert in GetCertifications())
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        @cert
                                    </span>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Schedule -->
                    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h3 class="text-lg font-semibold text-gray-900">This Week's Schedule</h3>
                            <button class="text-blue-500 hover:text-blue-600 text-sm font-medium">
                                View Full Schedule
                            </button>
                        </div>
                        <!-- Schedule content would go here -->
                        <div class="text-center py-8 text-gray-500">
                            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            No scheduled sessions this week
                        </div>
                    </div>
                </div>

                <!-- Contact & Actions -->
                <div class="space-y-6">
                    <!-- Contact Info -->
                    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Contact Information</h3>
                        <div class="space-y-3">
                            <div class="flex items-center">
                                <svg class="w-5 h-5 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.15a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                                <span class="text-sm text-gray-600">@trainer.Email</span>
                            </div>
                            
                            <div class="flex items-center">
                                <svg class="w-5 h-5 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                <span class="text-sm text-gray-600">Joined @(trainer.CreatedDate.ToString("MMMM yyyy"))</span>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Actions -->
                    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
                        <div class="space-y-3">
                            <button class="w-full flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-500 hover:bg-blue-600 transition-colors">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                Set Schedule
                            </button>
                            
                            <button class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 515.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 919.288 0M15 7a3 3 0 11-6 0 3 3 0 616 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 614 0z"></path>
                                </svg>
                                Assign Clients
                            </button>
                            
                            <button class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.959 8.959 0 01-4.906-1.436L3 21l2.436-5.094A8.959 8.959 0 013 12c0-4.418 3.582-8 8-8s8 3.582 8 8z"></path>
                                </svg>
                                Send Message
                            </button>
                            
                            <button @onclick="DeleteTrainer" class="w-full flex items-center justify-center px-4 py-3 border border-red-300 text-sm font-medium rounded-lg text-red-700 bg-white hover:bg-red-50 transition-colors">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                                Remove Trainer
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int TrainerId { get; set; }

    private UserDto? trainer;
    private bool isLoading = true;
    private const int TRAINER_ROLE_ID = 2; // Update this to match your actual trainer role ID

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainer();
    }

    private async Task LoadTrainer()
    {
        try
        {
            isLoading = true;
            trainer = await UserService.GetUserById(TrainerId);
            
            // Verify the user is actually a trainer
            if (trainer != null && trainer.RoleId != TRAINER_ROLE_ID)
            {
                trainer = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trainer: {ex.Message}");
            trainer = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/dashboard/trainers");
    }

    private string GetInitials()
    {
        if (trainer == null || string.IsNullOrEmpty(trainer.Name)) return "?";
        
        var parts = trainer.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return trainer.Name[0].ToString().ToUpper();
    }

    private int GetRandomValue(int min, int max)
    {
        if (trainer == null) return min;
        var seed = trainer.Id;
        return (seed % (max - min + 1)) + min;
    }

    private string GetRandomRating()
    {
        if (trainer == null) return "5.0";
        var seed = trainer.Id;
        var rating = 4.0 + (seed % 11) / 10.0; // Range 4.0-5.0
        return rating.ToString("F1");
    }

    private List<string> GetCertifications()
    {
        // Generate some random certifications based on trainer ID
        var allCerts = new[] { "NASM-CPT", "ACE Certified", "ACSM Certified", "CrossFit Level 1", "Yoga Alliance RYT-200", "Nutrition Specialist" };
        if (trainer == null) return allCerts.Take(3).ToList();
        
        var seed = trainer.Id;
        return allCerts.Where((cert, index) => (seed + index) % 3 == 0).ToList();
    }

    private async Task DeleteTrainer()
    {
        // Note: UserService.DeleteUser method doesn't exist in your interface
        // You'll need to add this method to IUserService or remove this functionality
        Console.WriteLine($"Delete trainer functionality not implemented");
    }
}