@using SmartGym.Models
@using SmartGym.Services
@inject IClassService ClassService
@inject IUserService UserService
@inject IDashboardService DashboardService
@inject IOrderService OrderService

@page "/dashboard"

<div class="ml-6 h-full overflow-y-auto">
    <h1 class="text-2xl font-bold">Dashboard</h1>
    <div class="mt-4 flex gap-6">
        <div class="border-primary rounded-[10px] border-2 bg-white p-4">
            Active Members Today: <br>
            <span class="text-2xl text-green-500">100</span>
        </div>
        <div class="border-background rounded-[10px] border-2 bg-white p-4">
            Class Occupancy: <br>
            <span class="text-2xl text-green-500">75%</span>
        </div>
        <div class="border-secondary rounded-[10px] border-2 bg-white p-4">
            Peak Hours: <br>
            <span class="text-2xl !text-green-500">5 PM - 7 PM</span>
        </div>
        <div class="border-text rounded-[10px] border-2 bg-white p-4">
            Cafe Orders: <br>
            <span class="text-2xl text-green-500">58</span>
            @* <span class="text-2xl text-green-500">58<br></span>
            <span class="text-2xl text-green-500">Revenue: <br>$290</span> *@

        </div>
    </div>

    <!-- Upcoming Classes and Daily Check-ins Row -->
<div class="mt-8 flex gap-6">
    <!-- Daily Check-ins Graph -->
    <div class="flex-1">
        @if (checkinData == null)
        {
            <div class="rounded-lg bg-gray-100 p-4">Loading chart data...</div>
        }
        else
        {
            <CheckinChart CheckinData="checkinData" />
        }
    </div>
    
    <!-- Upcoming Classes -->
    <div class="flex-1">
        <h2 class="mb-2 text-xl font-semibold">Upcoming Classes</h2>
        <table class="min-w-full rounded-lg border border-gray-200 bg-white">
            <thead>
                <tr class="bg-gray-100">
                    <th class="border-b px-4 py-2 text-left">Class</th>
                    <th class="border-b px-4 py-2 text-left">Trainer</th>
                    <th class="border-b px-4 py-2 text-left">Time</th>
                    <th class="border-b px-4 py-2 text-left">Spots Left</th>
                </tr>
            </thead>
            <tbody>
                @if (upcomingClasses != null && upcomingClasses.Any())
                {
                    @foreach (var classItem in upcomingClasses)
                    {
                        <tr>
                            <td class="border-b px-4 py-2">@classItem.Name</td>
                            <td class="border-b px-4 py-2">@GetTrainerName(classItem.TrainerId)</td>
                            <td class="border-b px-4 py-2">@classItem.Schedule.ToString("MMM dd, h:mm tt")</td>
                            <td class="border-b px-4 py-2">@classItem.MaxCapacity</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="px-4 py-4 text-center text-gray-500">
                            @if (allClasses.Any())
                            {
                                <text>No upcoming classes scheduled</text>
                            }
                            else
                            {
                                <text>Loading classes...</text>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

    <!-- Charts Row -->
    <div class="mt-8 flex gap-6">
        <div class="flex-1">
            @if (revenueData == null)
            {
                <div class="bg-gray-100 p-4 rounded-lg">Loading revenue data...</div>
            }
            else
            {
                <RevenueChart RevenueData="revenueData" />
            }
        </div>
        <div class="flex-1">
            @if (attendanceData == null)
            {
                <div class="rounded-lg bg-gray-100 p-4">Loading attendance data...</div>
            }
            else
            {
                <AttendanceChart AttendanceData="attendanceData" />
            }
        </div>
    </div>

    <div class="mt-6 p-4">
        <div class="view-user-head flex items-center gap-4">
            <h2 class="text-lg font-semibold">View Users</h2>
            <button class="bg-primary-500 rounded px-4 py-2 text-white"><i class="fa-solid fa-user-plus"></i>Add User</button>
            <input type="text" placeholder="Search Users" class="rounded border px-2 py-1" />
        </div>

        <div class="mt-4 overflow-x-auto">
            <table class="min-w-full rounded-lg border border-gray-200 bg-white">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border-b px-4 py-2 text-left">Name</th>
                        <th class="border-b px-4 py-2 text-left">Email</th>
                        <th class="border-b px-4 py-2 text-left">Role</th>
                        <th class="border-b px-4 py-2 text-left">Status</th>
                        <th class="border-b px-4 py-2 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="border-b px-4 py-2">Komal Singh</td>
                        <td class="border-b px-4 py-2">komal@example.com</td>
                        <td class="border-b px-4 py-2">Admin</td>
                        <td class="border-b px-4 py-2 text-green-600">Active</td>
                        <td class="border-b px-4 py-2">
                            <button class="text-blue-500 hover:underline">Edit</button>
                            <button class="ml-2 text-red-500 hover:underline">Delete</button>
                        </td>
                    </tr>
                    <tr>
                        <td class="border-b px-4 py-2">John Doe</td>
                        <td class="border-b px-4 py-2">john@example.com</td>
                        <td class="border-b px-4 py-2">Member</td>
                        <td class="border-b px-4 py-2 text-green-600">Active</td>
                        <td class="border-b px-4 py-2">
                            <button class="text-blue-500 hover:underline">Edit</button>
                            <button class="ml-2 text-red-500 hover:underline">Delete</button>
                        </td>
                    </tr>
                    <!-- Add more rows as needed -->
                </tbody>
            </table>
        </div>
    </div>
    </div>

@code {
    private List<ClassDTO> allClasses = new();
    private List<ClassDTO> upcomingClasses = new();
    private List<UserDto> allUsers = new();
    private List<CheckinDataPoint> checkinData = new();
    private List<AttendanceDataPoint> attendanceData = new();
    private List<RevenueDataPoint> revenueData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load all classes and users first
            allClasses = await ClassService.GetAllClasses();
            allUsers = await UserService.GetAllUsers();
            
            // Load chart data sequentially with small delays to avoid DbContext conflicts
            checkinData = await DashboardService.GetDailyCheckinsAsync();
            await Task.Delay(100); // Small delay to prevent concurrent access
            
            attendanceData = await DashboardService.GetDailyAttendanceAsync();
            await Task.Delay(100); // Small delay to prevent concurrent access
            
            revenueData = await DashboardService.GetDailyRevenueAsync();
            
            // Filter for upcoming classes (next 5)
            var currentTime = DateTime.Now;
            upcomingClasses = allClasses
                .Where(c => c.Schedule > currentTime)
                .OrderBy(c => c.Schedule)
                .Take(5)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            upcomingClasses = new List<ClassDTO>();
            checkinData = new List<CheckinDataPoint>();
            attendanceData = new List<AttendanceDataPoint>();
            revenueData = new List<RevenueDataPoint>();
        }
    }

    private string GetTrainerName(int trainerId)
    {
        var trainer = allUsers.FirstOrDefault(u => u.Id == trainerId);
        return trainer?.Name ?? "Unknown Trainer";
    }
}