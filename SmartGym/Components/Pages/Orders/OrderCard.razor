@using SmartGym.Models
@using SmartGym.Components.UIClasses.Cafe
@inject NavigationManager navigationManager
<div class="border-primary flex basis-1/3 flex-col rounded-lg border bg-white shadow-sm" style="min-height:30vh; max-height:31vh; max-width:500px">
    <div class="flex">
        <label class="text-2xl"> @currOrder.Id </label>
        <InputSelect ValueExpression="@(() => currOrder.OrderStatus)" Value=@currOrder.OrderStatus ValueChanged="(Constants.OrderStatus s) => setStatusOrder(s)" class="flex-grow">
            @foreach (Constants.OrderStatus enumVal in Constants.OrderStatus.GetValues(typeof(Constants.OrderStatus)))
            {
                <option value=@enumVal> @enumVal.ToString() </option>
            }
        </InputSelect>
        <button @onclick="deleteOrder" class="bg-red-500 text-white"> <i class="fa-solid fa-trash"></i> </button>
    </div>
    

    <div class="flex-grow overflow-y-auto border">
        @foreach (CartItemsDTO item in currOrder.OrderCartList)
        {
            <div class="border-primary flex border py-5 text-lg">
                <div class="flex-grow">@item.Name</div>
                <div class="flex-grow-1">@($"x{item.Quantity}") </div>
                <div class="flex-grow-0">@string.Format("{0:C}", item.Price)</div>
            </div>
        }
    </div>
    <p class="mb-3 text-lg">Total: @string.Format("{0:C}", currOrder.TotalPrice)</p>
    <div class="flex w-full" style="bottom:0; position:relative;">
        <button @onclick=viewOrder class="bg-accent flex-grow-1 border p-5 text-white hover:bg-background hover:cursor-pointer">
            <i class="fa-solid fa-pen-to-square"></i>Edit
        </button>
        @if (currOrder.OrderStatus == Constants.OrderStatus.Incomplete || currOrder.OrderStatus == Constants.OrderStatus.Pending)
        {
            <button @onclick=completeOrder class="bg-primary flex-grow-1 border p-5 text-white hover:bg-background hover:cursor-pointer">
                <i class="fa-solid fa-flag-checkered"></i>Complete
            </button>
        }
    </div>
</div>
@code {
    [Parameter]
    public OrderDTO? currOrder { get; set; }
    [Parameter]
    public EventCallback<OrderDTO> ViewOrderCallBack { get; set; }
    [Parameter]
    public EventCallback<OrderDTO> EditStatusOrderCallBack { get; set; }
    [Parameter]
    public EventCallback<OrderDTO> DeleteOrderCallBack { get; set; }

    public async Task viewOrder()
    {
        await ViewOrderCallBack.InvokeAsync(currOrder);
    }

    public async Task completeOrder()
    {
        currOrder.OrderStatus = Constants.OrderStatus.Completed;
        await EditStatusOrderCallBack.InvokeAsync(currOrder);
    }

    public async Task setStatusOrder(Constants.OrderStatus status)
    {
        currOrder.OrderStatus = status;
        await EditStatusOrderCallBack.InvokeAsync(currOrder);
    }

    public async Task deleteOrder()
    {
        await DeleteOrderCallBack.InvokeAsync(currOrder);
    }
}
