@using Components.UIClasses.Cafe;
<div class="flex flex-col border border-black" style="width:33vw; max-width:33vw; max-height:90vh;">
    <h5 class="mb-2 justify-center border px-2 py-1 text-lg font-semibold">
        Cart
    </h5>
    <div class="relative flex flex-col items-center gap-2 overflow-y-auto" style="max-height: 90%; max-width:100%; min-height: 80%;">
        @foreach (var cartItem in instance.CurrentCart.CartItems.Values)
        {
            <MenuCartItemLayout cartMain="this" cartItem=@cartItem/>
        }
    </div>
    <div class="flex-grow-1 flex w-full flex-col border">
        <label class="right w-full px-4" style="text-align: end;">Subtotal: @(string.Format("{0:C}", instance.CurrentCart.Subtotal))</label>
        <label class="right w-full px-4" style="text-align: end;">Tax (7%): @(string.Format("{0:C}", instance.CurrentCart.Tax))</label>
        <label class="right w-full px-4" style="text-align: end;">Total: @instance.CurrentCart.TotalString</label>
    </div>
    <button class="flex-grow-1 h-full w-full border border-black py-4 text-4xl" @onclick="OnClickCallBack">
        Checkout
    </button>
</div>
@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallBack { get; set; }
    private PointOfSaleModel instance = PointOfSaleModel.instance;

    protected override async Task OnInitializedAsync()
    {
        await updateCart();
    }

    public Task updateCart()
    {
        instance.CurrentCart.updateTotal();
        StateHasChanged();
        return Task.CompletedTask;
    }

    async public Task removeFromCart(int id, int oldAmount)
    {
        instance.CurrentCart.removeItem(id, oldAmount);
        await updateCart();
    }

    async public Task addToCart(MenuItemModel item)
    {
        instance.CurrentCart.addItem(item);
        await updateCart();
    }

    
}
