@using SmartGym.Components.UIClasses.Cafe
<div class="fixed bottom-0 left-0 right-0 top-0 bg-black opacity-50" style="z-index:100;">
</div>
<div class="fixed top-0 rounded-lg border bg-white align-middle" style="z-index:101; width:20vw; max-height: 80%;">
    @if (instance == null)
    {
        <div class="row">
            <div class="col-5 col-md-3 text-end">None</div>
        </div>
        <button class="mt-3" @onclick="cancelOnClickCallback">
            Cancel
        </button>
    }
    else if (instance.CurrentCart.CartItems.Count == 0)
    {
        <div class="row">
            <div class="col-5 col-md-3 text-end">Cart is empty.</div>
        </div>
        <button class="mt-3" @onclick="cancelOnClickCallback">
            Cancel
        </button>
    }
    else
    {
        <div class="overflow-y-auto border" style="width: 100%; max-height:80%; height:80%;">
            <table style="width: 100%;">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="px-4 py-2 text-left">Item</th>
                        <th class="px-4 py-2 text-left">Quantity</th>
                        <th class="px-4 py-2 text-left">Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (CartModel.CartItemModel cartItem in instance.CurrentCart.CartItems.Values)
                    {
                        <tr>
                            <td class="flex-grow-1 px-4 py-2">@cartItem.Item.Name</td>
                            <td class="flex-grow-1 px-4 py-2">@($"x{@cartItem.Amount}") </td>
                            <td class="flex-grow-1 px-4 py-2">@cartItem.CurrentPriceString</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
    }

    <div class="row flex w-full" style="width:100%;">
        <button class="flex-grow-1 mt-3 border" @onclick="cancelOnClickCallback">
            Cancel
        </button>
        <button class="flex-grow-1 mt-3 border" type="button" @onclick="checkoutOnClickCallback">
            Pay @instance.CurrentCart.TotalString
        </button>
    </div>
</div>



@code {
    [Parameter]
    public EventCallback<MouseEventArgs> checkoutOnClickCallback { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> cancelOnClickCallback { get; set; }
    private PointOfSaleModel instance = PointOfSaleModel.instance;

    public void update()
    {
        StateHasChanged();    
    }

}
