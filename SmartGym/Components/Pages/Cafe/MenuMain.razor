@page "/POS"
<title>@username's Order</title>
<h1> @username's Order </h1>
<div class="flex gap-2">
    <div class="flex h-full w-full flex-col overflow-y-hidden border border-black p-4">
        <section class=" w-full p-2 flex flex-row justify-between ">
            <div class="w-full">

                @* TODO: Add Search Functionality to menu, updating the menu when input is updated *@
                <input type="text" @onchange="@((ChangeEventArgs e) => { searchText = "" + e.Value; updateMenu(); })"
                       class="relative rounded-full border px-2 py-2 text-slate-700 shadow-lg transition duration-300 placeholder:text-slate-400 hover:border-slate-300 focus:border-slate-400 focus:shadow focus:outline-none"
                       style="width: 55%;" placeholder="Search..." />

                @* Depending on decided functionality, might be removed *@
                @*<button class="rounded-r-full border py-2 shadow-lg transition"
                        type="button">
                    Search
                </button>*@
            </div>
            <div class="flex w-96 flex-col">

                    @* TODO: Add Filters and have them update the menu when selected *@
                    <button class="h-45 w-full rounded-4 border border-black px-2 py-2">
                        Filter
                    </button>

                </div>
        </section>
       
        <section class="h-11/12 max-h-11/12 w-screen max-w-screen">
            <div class="flex max-w-1/12 flex-row">
                
                <div class="" >
                    <div class="flex h-full min-h-0 flex-wrap gap-2 overflow-y-auto border p-4 items-center justify-center">
                        @* Fill with MenuItemContainerLayout depending on amount of items desired *@
                        @* TODO: Dynamically update depending on filters *@
                        @foreach (var item in POS.instance.filteredMenu)
                        {
                            <MenuItemLayout item=@item OnClickCallback=@(() => addToCart(@item))/>
                        }

                    </div>
                </div>

            </div>
        </section>
    </div>
    <MenuCartLayout @ref="menuCart"/>
</div>

@code {
    public string searchText = "";
    public string username = "";
    private MenuCartLayout menuCart;

    Task InitializeMenu()
    {
        //TODO: Get User's Name
        username = "Test";
        POS.instance.refresh();
        //TODO: Load Cart from User
        return Task.CompletedTask;
    }
    protected override async Task OnInitializedAsync()
    {
        await InitializeMenu();
    }
    public void addToCart(MenuItem item)
    {
        menuCart.addToCart(item);
    }
    public void updateMenu()
    {
        POS.instance.search(searchText);
        StateHasChanged();
    }

}
