@page "/cafe/{uId:int}-{cId:int}"
@using SmartGym.Components.UIClasses.Cafe
@using SmartGym.Components.Display
@using SmartGym.Models
@using SmartGym.Services
@inject IOrderService orderService
@inject ICafeService cafeService
@inject IUserService userService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>My Order</h1>
<div class="flex">
    <div class="border border-black p-4" style="max-width:65vw;">
		@*<section class="flex flex-row justify-between p-2" style="min-height:1vh;">
            <div class="flex w-96 flex-col">

                     TODO: Add Filters and have them update the menu when selected 
                    <button class="bg-secondry rounded-4 h-45 w-full border border-primary px-2 py-2 hover:cursor-pointer hover:bg-background">
                    <i class="fa-solid fa-filter mr-4"></i>Filter
                    </button>

                </div>
        </section>*@
        @if (PointOfSaleModel.instance.FilteredMenu == null || PointOfSaleModel.instance.FullMenuDict == null)
        {
            <LoadingLayout />
        }
        else
        {
            <div class="rounded-lg border p-4 bg-white">
                <div class="flex flex-wrap justify-center gap-2 overflow-y-auto" style="max-height:80vh;">
                    @* Fill with MenuItemContainerLayout depending on amount of items desired *@
                    @* TODO: Dynamically update depending on filters *@
                    @foreach (var item in PointOfSaleModel.instance.FilteredMenu)
                    {
                        <MenuItemLayout item=@item OnClickCallback=@(() => addToCart(@item)) />
                    }

                </div>
            </div>
            

        }
    </div>
    <MenuCartLayout @ref="menuCart" OnClickCallBack=showCheckout/>
</div>
<MenuCheckoutModal @ref="checkoutModal" checkoutOnClickCallback=finishCheckout cancelOnClickCallback=cancelCheckout/>

@code {

    [Parameter]
    public int uId { get; set; }
    [Parameter]
    public int cId { get; set; }

    [CascadingParameter]
    public MainLayout layout { get; set; }

    public string searchText = "";
    public string userName = "";
    private MenuCartLayout menuCart;
    private MenuCheckoutModal checkoutModal;


    async Task InitializeMenu()
    {

        //TODO: Get User's Name
        userName = "Test";
        PointOfSaleModel.instance = new PointOfSaleModel(orderService, cafeService);
        await PointOfSaleModel.instance.refresh();

        UserDto userDto = await userService.GetUserById(uId);
        if (userDto != null)
        {
            userName = userDto.Name;
            OrderDTO orderDTO = await orderService.GetOrderById(cId);
            if (orderDTO != null)
            {
                PointOfSaleModel.instance.loadCart(new CartModel(orderDTO, PointOfSaleModel.instance.FullMenuDict));
            }
        }
        else
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                userName = user.Identity.Name;
            }
        }

        await layout.setupSearch($"{userName}'s Order", new EventCallback<string>(this, searchMenu));

        await updateMenu();
        //TODO: Load Cart from User
    }

    public async Task searchMenu(string search)
    {
        searchText = search;
        await updateMenu();
        
    }

    public async Task finishCheckout()
    {
        await PointOfSaleModel.instance.checkout(uId, cId);
        checkoutModal.hide();
        await menuCart.updateCart();
        StateHasChanged();

    }

    public Task cancelCheckout()
    {
        checkoutModal.hide();
        return Task.CompletedTask;
    }

    public async Task showCheckout()
    {
        checkoutModal.show();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeMenu();
    }
    public async Task addToCart(MenuItemModel item)
    {
        await menuCart.addToCart(item);
    }
    public async Task updateMenu()
    {
        await PointOfSaleModel.instance.search(searchText);
        StateHasChanged();
    }

}
