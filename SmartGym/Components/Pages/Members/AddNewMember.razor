@attribute [Authorize(Roles = "Admin")]
@page "/addnewmember"
@using SmartGym.Constants.Enums
@using SmartGym.Helpers
@using SmartGym.Models
@using SmartGym.Services
@using System.Net.Mail
@using Microsoft.AspNetCore.Authorization
@inject SmartGym.Services.IUserService service
@inject NavigationManager navManager

<PageTitle>Add New Member</PageTitle>

<h1 class="mb-4" id="title">Register Member</h1>
<section class="contained text-xl bg-text" aria-labelledby="title">
	<div asp-validation-summary="ModelOnly" class="text-danger"></div>
	<p>
		<label asp-for="Input.FirstName">First Name: </label>
		<input @bind=FirstName asp-for="Input.FirstName" class="form-control" aria-required="true"
			   placeholder="first name" />
		<span asp-validation-for="Input.FirstName" class="text-danger"></span>
	</p>
	<p>
		<label asp-for="Input.LastName">Last Name: </label>
		<input @bind=LastName asp-for="Input.LastName" class="form-control" aria-required="true"
			   placeholder="last name" />
		<span asp-validation-for="Input.LastName" class="text-danger"></span>
	</p>
	<p>
		<label asp-for="Input.Email">Email: </label>
		<input @bind=Email asp-for="Input.Email" class="form-control" autocomplete="username"
			   aria-required="true" placeholder="email address" />
		<span asp-validation-for="Input.Email" class="text-danger"></span>
	</p>
	<p>
		<label for="dob">DOB: </label>
		<input @bind=DateOfBirth type="date" id="dob" name="DOB" />
	</p>
	<p>
        <label for="role">Role: </label>
        <select @bind=Role name="role" id="role">
            <option value="" disabled>Select a role</option>
            @foreach (RoleId role in Enum.GetValues(typeof(RoleId)))
            {
                <option value="@role">@EnumHelper.GetDisplayName(role)</option>
            }
        </select>
	</p>
	<p>
		<button @onclick=AddMember class="inline-block bg-primary hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow transition duration-150 hover:cursor-pointer">
            <i class="fa-solid fa-user-plus mr-4"></i>Register User
		</button>
		<a href="/members" class="text-secondary">Cancel</a>
	</p>
</section>

@code {
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public RoleId Role { get; set; }
    public DateTime DateOfBirth { get; set; } = DateTime.Now;

    /// <summary>
    /// Adds a member to the table
    /// </summary>
    /// <returns></returns>
    private async Task AddMember()
    {
        // check first name, last name
        if (pageIsValid())
        {
            // TODO: popup error
            UserDto tempUser = new UserDto();
            tempUser.Name = $"{FirstName} {LastName}";
            tempUser.FirstName = FirstName;
            tempUser.LastName = LastName;
            tempUser.Email = Email;
            tempUser.DateOfBirth = DateOfBirth;
            tempUser.Status = 0;
            tempUser.RoleId = Role;
            tempUser.CreatedDate = DateTime.Now;
            tempUser.UpdatedDate = DateTime.Now;
            await service.CreateUser(tempUser);
            navManager.NavigateTo("/members", true);
        }
        else
        {
            await Task.CompletedTask;
        }
    }

    bool pageIsValid()
    {
        if (isEmpty(FirstName))
        {
            // TODO: popup error
            return false;
        }
        else if (isEmpty(LastName))
        {
            return false;
        }
        else if (!emailIsValid())
        {
            return false;
        }
        return true;
    }

    bool isEmpty(string s)
    {
        return (s.Trim() == "");
    }

    private bool emailIsValid()
    {
        try
        {
            MailAddress m = new MailAddress(Email);
            return true;
        }
        catch (Exception e)
        {
            return false;
        }
    }
}