@page "/members"
@using SmartGym.Constants.Enums
@using SmartGym.Helpers
@using SmartGym.Models
@using SmartGym.Services
@using Microsoft.AspNetCore.Identity
@inject SmartGym.Services.IUserService service
@inject NavigationManager navManager
@inject UserManager<AppUser> UserManager
@attribute [StreamRendering]


<PageTitle>View Members</PageTitle>

<style>
    table,
    th,
    td {
        border: 1px solid black;
        border-collapse: collapse;
    }
</style> 

<h1 class="text-5xl mb-4">View Members</h1>
<hr />
<div class="">
    @if (userList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="inline-flex">
            <a href="/addnewmember" class="text-right bg-text hover:bg-blue-700 text-white font-bold py-5 px-4 rounded inline-flex items-center">
                <i class="fa-solid fa-user-plus"></i>
                <span>Add New Member</span>
            </a>
        </div>
        <table class="w-full table-auto border-collapse text-sm">
            <caption class="caption-top text-lg">Current list of all members</caption>
            <thead class="text-left text-xl bg-background">
                <tr>
                    <th  class="p-4 py-3">First Name</th>
                    <th  class="p-4 py-3">Last Name</th>
                    <th  class="p-4 py-3">Email</th>
                    <th  class="p-4 py-3">Birthday</th>
                    <th  class="p-4 py-3">Membership Plan</th>
                    <th  class="p-4 py-3">Status</th>
                    <th  class="p-4 py-3">Actions</th>
                </tr>
            </thead>
           
            <tbody class="">
                @foreach (UserDto userDto in userList)
                {
                    @if(userIndex % 2 != 0)
                    {
                        evenRow = "text-black bg-white";
                    }
                    else
                    {
                        evenRow = "text-black bg-primary-100";
                    }
                    <tr class="@evenRow">
                        <td>@userDto.FirstName</td>
                        <td>@userDto.LastName</td>
                        <td>@userDto.Email</td>
                        <td>@userDto.DateOfBirth.ToString("MM/dd/yyyy")</td>
								<td>@EnumHelper.GetDisplayName((RoleId)userDto.RoleId)</td>
								<td>@EnumHelper.GetDisplayName((UserStatus)userDto.Status)</td>
                        <td class="inline-flex">
                          <button onclick=@(() => DeleteUser(@userDto)) class="bg-red-300 p-3 text-black"> 
                            <i class="fa-solid fa-user-minus mr-3"></i> Delete Member
                          </button>
                          <button onclick=@(() => UpdateUser(@userDto)) class="bg-accent p-3 text-black">
                            <i class="fa-solid fa-pen-to-square mr-3"></i> Update Member
                          </button>
                        </td>
                    </tr>
                    userIndex++;
                }
            </tbody>
        </table>
    }
</div>

    


@code {
    private int userIndex = 0;
    private int isEven = 0;
    private string evenRow = "text-white bg-primary";
    private List<UserDto> userList = new();

    protected override async Task OnInitializedAsync()
    {
        // Populate userList
        userList = await service.GetAllUsers();
    }

    private Task DeleteUser(UserDto u)
    {
        navManager.NavigateTo($"/deletemember/{u.Id}");
        return Task.CompletedTask;
    }

    private Task UpdateUser(UserDto u)
    {
        navManager.NavigateTo($"/updatemember/{u.Id}");
        return Task.CompletedTask;
    }
}
