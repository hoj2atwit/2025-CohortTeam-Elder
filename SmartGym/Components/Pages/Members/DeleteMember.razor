@attribute [Authorize(Roles = "Admin")]
@page "/deletemember/{id:int}"
@using SmartGym.Models
@using SmartGym.Constants.Enums
@using SmartGym.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject SmartGym.Services.IUserService service
@inject NavigationManager navManager
@inject UserManager<AppUser> UserManager

<PageTitle>Delete Member</PageTitle>

<div>
    <div>
        @if (user == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div>
                <h4 style="color:red; font-size:40px"><b>Delete Member</b></h4>
                <hr />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div>
                    <p>First name: @user.FirstName</p>
                </div>
                <hr />
                <div>
                    <p>Last name: @user.LastName</p>
                </div>
                <hr />
                <div>
                    <p>Email: @user.Email</p>
                </div>
                <hr />
                <div>
                    <p>DOB: @user.DateOfBirth.ToString("MM/dd/yyyy")</p>
                </div>
                <hr />
                <div>
                    <p>Plan: @(userRoles.FirstOrDefault() ?? "No role")</p>
                </div>
                <hr />
                <div>
                    <p>Status: @((UserStatus)user.Status)</p>
                </div>
                <hr />
                <div>
                    <p>Are you sure you want to <b>delete</b> this member?</p>
                    <p>This member will be permanantly deleted.</p>
                    <input hidden asp-for="Id" />

                </div>
            </div>
            <button @onclick=DelMember class=""><b>[Delete]</b></button>
        }
        <a href="/members"> Cancel</a>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }
    private UserDto user { get; set; }
    private List<string> userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        // Populate userList

        user = await service.GetUserById(id);
        var appUser = await UserManager.FindByIdAsync(id.ToString());
        if (appUser != null)
        {
            userRoles = (await UserManager.GetRolesAsync(appUser)).ToList();
        }
        StateHasChanged();
    }

    /// <summary>
    /// Deletes a member from the table
    /// </summary>
    /// <returns></returns>
    private async Task DelMember()
    {
        await service.DeleteUser(id);
        navManager.NavigateTo("/members");
    }
}
