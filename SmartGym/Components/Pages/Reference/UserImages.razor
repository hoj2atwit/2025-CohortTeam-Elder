@page "/members/backend-edit"
@using SmartGym.Models
@using SmartGym.Helpers
@using SmartGym.Constants.Enums
@using Microsoft.AspNetCore.Identity
@attribute [StreamRendering]
@inject SmartGym.Services.IUserService usersService
@inject UserManager<AppUser> UserManager

<PageTitle>Edit Members Images</PageTitle>


<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<table id="usersTable" class="display">
	<thead>
		<tr>
			<th>Id</th>
			<th>Account Type</th>
			<th>Name</th>
			<th>Profile Image</th>
			<th>Birth Year</th>
			<th>Upload</th>
		</tr>
	</thead>
	<tbody>
		@if (userList != null)
		{
			foreach (var user in userList)
			{
				<tr>
					<td>@user.Id</td>
					<td>@EnumHelper.GetDisplayName(user.RoleId)</td>
					<td>@user.Name</td>
					<td>
						@if (!string.IsNullOrEmpty(user.ImageRef))
						{
							var defaultSvgs = new[] { "manager.svg", "staff.svg", "user.svg", "trainer.svg" };
							bool isDefaultSvg = user.ImageRef.EndsWith(".svg", StringComparison.OrdinalIgnoreCase) &&
							defaultSvgs.Any(svg => user.ImageRef.Equals(svg, StringComparison.OrdinalIgnoreCase));
							var imgSrc = isDefaultSvg
							? $"/lib/images/{user.ImageRef}"
							: $"/lib/db_images/{user.ImageRef}?cachebust={Guid.NewGuid()}";
							<img src="@imgSrc" alt="Profile" width="50" height="50" />
						}
					</td>
					<td>@user.DateOfBirth</td>
					<td class="py-2 px-4">
						<label class="flex items-center space-x-2 cursor-pointer">
							<span class="inline-block bg-blue-500 text-white text-xs px-3 py-1 rounded hover:bg-blue-600 transition">
								Upload
							</span>
							<InputFile class="hidden" OnChange="e => OnFileSelected(e, user)" />
						</label>
					</td>
				</tr>
			}
		}
		else
		{
			<p><em>Loading...</em></p>
		}
	</tbody>
</table>

@code {
	[Inject]
	private IJSRuntime JS { get; set; }
	private List<UserDto> userList;
	private Dictionary<int, string> userRoles = new();

	protected override async Task OnInitializedAsync()
	{
		userList = await usersService.GetAllUsers();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (userList != null && userList.Any())
		{
			await JS.InvokeVoidAsync("setupDataTable");
		}
	}
	private async Task OnFileSelected(InputFileChangeEventArgs e, UserDto user)
	{
		var usersFolder = Path.Combine("wwwroot", "lib", "db_images");
		var file = e.File;
		if (file != null)
		{
			string fileName;
			// Check if the current image was never updated
			var defaultSvgs = new[] { "manager.svg", "staff.svg", "user.svg", "trainer.svg" };
			bool isDefaultSvg = string.IsNullOrWhiteSpace(user.ImageRef) ||
			(user.ImageRef.EndsWith(".svg", StringComparison.OrdinalIgnoreCase) &&
			defaultSvgs.Any(svg => user.ImageRef.Equals(svg, StringComparison.OrdinalIgnoreCase)));
			string guid = "";
			if (isDefaultSvg)
			{
				guid = Guid.NewGuid().ToString("N"); // (no dashes)
				var ext = Path.GetExtension(file.Name);
				fileName = $"{guid}{ext}";
			}
			else
			{
				var oldNameWithoutExt = Path.GetFileNameWithoutExtension(user.ImageRef);
				guid = oldNameWithoutExt;
				var newExt = Path.GetExtension(file.Name);
				fileName = $"{oldNameWithoutExt}{newExt}";

				// Delete the old file if it exists
				var oldFilePath = Path.Combine(usersFolder, user.ImageRef);
				if (File.Exists(oldFilePath))
				{
					try
					{
						File.Delete(oldFilePath);
					}
					catch (Exception)
					{
						// Optionally log error
					}
				}
			}

			const long maxFileSize = 600 * 600 * 4;

			if (file.Size > maxFileSize)
			{
				await JS.InvokeVoidAsync("alert", "File is too large. Maximum allowed size is 600px x 600px.");
				return;
			}

			var filePath = Path.Combine(usersFolder, fileName);
			Directory.CreateDirectory(usersFolder);
			using (var stream = new FileStream(filePath, FileMode.Create))
			{
				try
				{
					await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
				}
				catch (Exception ex)
				{
					await JS.InvokeVoidAsync("alert", $"File upload failed: {ex.Message}");
					return;
				}
			}

			byte[] imageBytes;
			using (var ms = new MemoryStream())
			{
				try
				{
					await file.OpenReadStream(maxFileSize).CopyToAsync(ms);
				}
				catch (Exception ex)
				{
					await JS.InvokeVoidAsync("alert", $"File upload failed: {ex.Message}");
					return;
				}
				imageBytes = ms.ToArray();
			}

			// Use the injected service to update the image reference and upload blob
			var result = await usersService.UploadUserImageBlob(user.Id, fileName, imageBytes, guid);

			string message = result.Message ?? "No message returned.";

			await JS.InvokeVoidAsync("alert", message);

			if (result.Success)
			{
				userList = await usersService.GetAllUsers();
				StateHasChanged();
			}
		}
	}
}

<script>
	function setupDataTable() {
		// Destroy existing DataTable instance if it exists
		if ($.fn.DataTable.isDataTable('#usersTable')) {
			$('#usersTable').DataTable().destroy();
		}
		// Initialize the new DataTable
		$('#usersTable').DataTable({
			paging: false
		});
	}
</script>