@page "/menu-items/backend-edit"
@using SmartGym.Models
@using SmartGym.Helpers
@using SmartGym.Constants.Enums
@attribute [StreamRendering]
@inject SmartGym.Services.ICafeService cafeService

<PageTitle>Edit Menu Item Images</PageTitle>

<table id="usersTable" class="display">
	<thead>
		<tr>
			<th>Id</th>
			<th>Name</th>
			<th>Image</th>
			<th>Description</th>
			<th>Upload</th>
		</tr>
	</thead>
	<tbody>
		@if (menuItemList != null)
		{
			foreach (var menuItem in menuItemList)
			{
				<tr>
					<td>@menuItem.Id</td>
					<td>@menuItem.Name</td>
					<td>
						@if (!string.IsNullOrEmpty(menuItem.ImageRef))
						{
							var isDefault = menuItem.ImageRef.Equals("default_food.svg", StringComparison.OrdinalIgnoreCase);
							var imgSrc = isDefault
								? $"/lib/images/{menuItem.ImageRef}"
								: $"/lib/db_images/{menuItem.ImageRef}?cachebust={Guid.NewGuid()}";
							<img src="@imgSrc" alt="img" width="50" height="50" />
						}
					</td>
					<td>@menuItem.Description</td>
					<td class="py-2 px-4">
						<label class="flex items-center space-x-2 cursor-pointer">
							<span class="inline-block bg-blue-500 text-white text-xs px-3 py-1 rounded hover:bg-blue-600 transition">
								Upload
							</span>
							<InputFile class="hidden" OnChange="e => OnFileSelected(e, menuItem)" />
						</label>
					</td>
				</tr>
			}
		}
		else
		{
			<tr>
				<td colspan="5"><em>Loading...</em></td>
			</tr>
		}
	</tbody>
</table>

@code {
	[Inject]
	private IJSRuntime JS { get; set; }
	private List<MenuItemsDTO> menuItemList;

	protected override async Task OnInitializedAsync()
	{
		menuItemList = await cafeService.GetFullMenu();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender && menuItemList != null && menuItemList.Any())
		{
			await JS.InvokeVoidAsync("setupDataTable");
		}
	}

	private async Task OnFileSelected(InputFileChangeEventArgs e, MenuItemsDTO menuItem)
	{
		var menuItemsFolder = Path.Combine("wwwroot", "lib", "db_images");
		var file = e.File;
		if (file != null)
		{
			string fileName;
			// Check if the current image has ever been updated
			bool isDefaultSvg = string.IsNullOrWhiteSpace(menuItem.ImageRef) ||
				menuItem.ImageRef.Equals("default_food.svg", StringComparison.OrdinalIgnoreCase);
		   string guid = "";
			if (isDefaultSvg)
			{
				guid = Guid.NewGuid().ToString("N");
				var ext = Path.GetExtension(file.Name);
				fileName = $"{guid}{ext}";
			}
			else
			{
				var oldNameWithoutExt = Path.GetFileNameWithoutExtension(menuItem.ImageRef);
				guid = oldNameWithoutExt;
				var newExt = Path.GetExtension(file.Name);
				fileName = $"{oldNameWithoutExt}{newExt}";

				// Delete the old file if it exists
				var oldFilePath = Path.Combine(menuItemsFolder, menuItem.ImageRef);
				if (File.Exists(oldFilePath))
				{
					try
					{
						File.Delete(oldFilePath);
					}
					catch (Exception)
					{
						// Optionally log error
					}
				}
			}

			const long maxFileSize = 600 * 600 * 4;

			if (file.Size > maxFileSize)
			{
				await JS.InvokeVoidAsync("alert", "File is too large. Maximum allowed size is 600px x 600px.");
				return;
			}

			var filePath = Path.Combine(menuItemsFolder, fileName);
			Directory.CreateDirectory(menuItemsFolder);
			using (var stream = new FileStream(filePath, FileMode.Create))
			{
				try
				{
					await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
				}
				catch (Exception ex)
				{
					await JS.InvokeVoidAsync("alert", $"File upload failed: {ex.Message}");
					return;
				}
			}

			byte[] imageBytes;
			using (var ms = new MemoryStream())
			{
				try
				{
					await file.OpenReadStream(maxFileSize).CopyToAsync(ms);
				}
				catch (Exception ex)
				{
					await JS.InvokeVoidAsync("alert", $"File upload failed: {ex.Message}");
					return;
				}
				imageBytes = ms.ToArray();
			}

			var result = await cafeService.UploadMenuImageBlob(menuItem.Id, fileName, imageBytes, guid);

			string message = result.Message ?? "No message returned.";

			await JS.InvokeVoidAsync("alert", message);

			if (result.Success)
			{
				menuItemList = await cafeService.GetFullMenu();
				StateHasChanged();
			}
		}
	}

}

<script>
	function setupDataTable() {
		// Destroy existing DataTable instance if it exists
		if ($.fn.DataTable.isDataTable('#usersTable')) {
			$('#usersTable').DataTable().destroy();
		}
		// Initialize the new DataTable without pagination
		$('#usersTable').DataTable({
			paging: true
		});
	}
</script>