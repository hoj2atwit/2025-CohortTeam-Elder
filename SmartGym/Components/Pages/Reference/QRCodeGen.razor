@page "/qrcode"
@using IronBarCode
@using SmartGym.Models
@using SmartGym.Services
@inject SmartGym.Services.IUserService service

<PageTitle>QR Code Generator</PageTitle>
<h1>QR Code</h1>
<section class="contained">
    <section class="flex items-center justify-center min-h-[80vh]">
        <!-- Button to trigger QR code generation -->
        @((MarkupString)qrCode)
    </section>
</section>

@code {

    // Variable to hold the generated QR code HTML
    private string qrCode = "";

    // Variable to hold user input text
    private string text = "";

    //Random number
    private static Random random = new Random();

    // Method to generate QR code from user input
    private void QRCodeGenerator(string text)
    {
        // Create a QR code from the input text
        try {

            if (string.IsNullOrEmpty(text))
            {
                throw new ArgumentException("Text can't be empty");
            }

            GeneratedBarcode myQRCode = QRCodeWriter.CreateQrCode(text);

            // Convert the generated QR code to HTML tag
            qrCode = Convert.ToString(myQRCode.ToHtmlTag());
        } catch (Exception e) {
            Console.WriteLine($"Error: {e.Message}");
        }
    }

    private static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    protected override async Task OnInitializedAsync()
    {
        string userQR = RandomString(10);
        QRCodeGenerator(userQR);
    }
}

