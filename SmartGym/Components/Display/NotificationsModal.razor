@using SmartGym.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using SmartGym.Services
@using System.Security.Claims;
@attribute [StreamRendering]
@inject INotificationService notifService


<button class="relative">
    <div @onclick=ToggleShow>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 cursor-pointer text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
        </svg>
        @if (unread > 0)
        {
            <!-- Notification dot -->
            <span class="absolute right-0 top-0 block h-2 w-2 rounded-full bg-red-500"></span>
        }
    </div>
    @if (isVisible)
    {
        <div id="dropdownMenu"
             class="z-[1000] absolute right-0 mt-2 block overflow-auto rounded-lg bg-white py-4 shadow-lg" style="max-width:20vw; max-height:500px; min-width:200px; width:400px;">
            <div class="mb-4 flex items-center justify-between px-4">
                <p class="cursor-pointer text-blue-600" style="font-size:0.75rem; line-height:1rem; font-weight: 500; ">Clear all</p>
                <div @onclick=OpenAll><p class="cursor-pointer text-blue-600" style="font-size:0.75rem; line-height:1rem; font-weight: 500; ">Mark as read</p></div>
            </div>
            <ul class="left-0 start-0">
                @if (notifList != null)
                {
                    @foreach (NotificationsDTO notificationsDTO in notifList)
                    {
                        <NotificationModalContent notifDTO="@notificationsDTO" OnReadCallBack="Open"/>
                    }
                }
            </ul>
            <p class="mb-4 mt-6 inline-block cursor-pointer px-4" style="font-size:0.75rem; line-height:1rem; font-weight: 500; color:blueviolet">View all Notifications</p>
        </div>
    }
</button>



@code {
    private List<NotificationsDTO> notifList { get; set; } = new();
    private bool isVisible { get; set; } = false;
    private int unread { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task<List<NotificationsDTO>> generateFakeNotifList()
    {
        List<NotificationsDTO> fakeList = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int id;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            try
            {
                id = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                for (int i = 0; i < 30; i++)
                {
                    NotificationsDTO fakeDTO = new();
                    fakeDTO.TimeStamp = DateTime.Now;
                    fakeDTO.UserId = id;
                    fakeDTO.Id = i;
                    fakeDTO.Title = "Taco Appointment";
                    fakeDTO.Contents = "You have been approved for your Taco Tuesday appointment!";
                    fakeDTO.WasOpened = i%2==0 ? false: true;

                    fakeList.Add(fakeDTO);
                }

            }
            catch (Exception e)
            {
                return fakeList;
            }

        }

        return fakeList;
    }

    public async Task ToggleShow()
    {   
        isVisible = !isVisible;
        if (isVisible)
        {
            await Update();
        }
    }

    public async Task Open(NotificationsDTO notifDTO)
    {
        notifDTO.WasOpened = true;
        unread -= 1;
        try
        {
            await notifService.MarkAsOpenedAsync(notifDTO.Id);
        } catch (Exception e)
        {

        }

        StateHasChanged();
    }

    public async Task OpenAll()
    {
        foreach (NotificationsDTO tempDTO in notifList)
        {
            tempDTO.WasOpened = true;
            try
            {
                await notifService.MarkAsOpenedAsync(tempDTO.Id);
            }
            catch (Exception e)
            {
                
            }
        }
        unread = 0;
        StateHasChanged();
    }

    public async Task Update()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int id;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            try
            {
                id = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                notifList = (List<NotificationsDTO>)await notifService.GetUserNotifications(id);
            }
            catch (Exception e)
            {
                notifList = new();
            }
        }
        notifList = await generateFakeNotifList();
        int tempUnreadTotal = 0;
        foreach (NotificationsDTO tempdto in notifList)
        {
            if (!tempdto.WasOpened)
            {
                tempUnreadTotal++;
            }
        }
        unread = tempUnreadTotal;
        StateHasChanged();   
    }
}
