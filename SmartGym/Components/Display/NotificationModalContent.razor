@using SmartGym.Models
@using System.Globalization
@if (!notifDTO.WasOpened)
{
    <li class="flex cursor-pointer items-center p-4 hover:bg-gray-50" >
        <div class="ml-6" @onclick=Read>
            <h3 class="text-sm font-medium text-slate-900">@notifDTO.Title</h3>
            <p class="mt-2 line-clamp-2 text-xs leading-relaxed text-slate-500">
                @notifDTO.Contents
            </p>
            <p class="mt-2 text-xs font-medium leading-3 text-blue-600">@getTimeSinceString()</p>
        </div>
    </li>
} else
{
    <li class="flex cursor-pointer items-center bg-gray-200 p-4 hover:bg-gray-50" >
        <div class="ml-6" @onclick=Read>
            <h3 class="text-sm font-medium text-slate-900">@notifDTO.Title</h3>
            <p class="mt-2 line-clamp-2 text-xs leading-relaxed text-slate-500">
                @notifDTO.Contents
            </p>
            <p class="mt-2 text-xs font-medium leading-3 text-blue-600">@getTimeSinceString()</p>
        </div>
    </li>
}

@code {
    [Parameter] public NotificationsDTO notifDTO { get; set; }
    [Parameter] public EventCallback<NotificationsDTO> OnReadCallBack { get; set; }
    [Parameter] public EventCallback<NotificationsDTO> OnUnreadCallBack { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await OnUnreadCallBack.InvokeAsync();
    }

    private async Task Read()
    {
        if (!notifDTO.WasOpened)
        {
            notifDTO.WasOpened = true;
            await OnReadCallBack.InvokeAsync(notifDTO);
        }
    }

    private string getTimeSinceString()
    {
        string s = "";

        if (notifDTO != null)
        {
            TimeSpan timeSince = DateTime.Now.Subtract(notifDTO.TimeStamp);
            if (timeSince.Days >= 365)
            {
                s = notifDTO.TimeStamp.ToString("MMM yyyy");
            }
            else if (timeSince.Days > 0)
            {
                s = timeSince.Days > 1 ? timeSince.Days + "days ago." : timeSince.Days + "day ago.";
            }
            else if (timeSince.Hours > 0)
            {
                s = timeSince.Hours > 1 ? timeSince.Hours + "hrs ago." : timeSince.Hours + "hr ago.";
            }
            else if (timeSince.Minutes > 0)
            {
                s = timeSince.Minutes > 1 ? timeSince.Minutes + "min ago." : timeSince.Minutes + "mins ago.";
            }
            else if (timeSince.Seconds > 0)
            {
                s = timeSince.Seconds > 30 ? timeSince.Seconds + "seconds ago." : "Now";
            }
        }
        return s;
    }
    
    //TODO: Create function so when clicked, Marked as read.
    //TODO: Change div color depending on isRead.
}
